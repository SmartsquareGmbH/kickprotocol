import org.jetbrains.dokka.gradle.DokkaAndroidTask
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

apply plugin: "com.android.library"
apply plugin: "kotlin-android"
apply plugin: "kotlin-kapt"
apply plugin: "org.jetbrains.dokka-android"
apply plugin: "maven-publish"

apply plugin: "de.mannodermaus.android-junit5"
apply plugin: "com.vanniktech.android.junit.jacoco"

apply plugin: "org.jlleitschuh.gradle.ktlint"
apply plugin: "io.gitlab.arturbosch.detekt"

android {
    compileSdkVersion 28

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 28
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.version
        consumerProguardFiles rootProject.file("config/proguard/consumer-proguard-rules.pro")
    }

    sourceSets.each {
        it.java.srcDirs += "src/$it.name/kotlin"
    }
}

dependencies {
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"

    api "com.google.android.gms:play-services-nearby:$playServicesVersion"
    api "io.reactivex.rxjava2:rxjava:$rxJavaVersion"
    api "com.squareup.moshi:moshi:$moshiVersion"

    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshiVersion"

    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testImplementation "org.amshove.kluent:kluent:$kluentVersion"
    testImplementation "io.mockk:mockk:$mockkVersion"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}

tasks.withType(KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
    }
}

task dokkaJavadoc(type: DokkaAndroidTask) {
    outputDirectory = "${project.buildDir}/javadoc"
    outputFormat = "javadoc"

    inputs.dir "src/main/kotlin"

    externalDocumentationLink { url = new URL("http://reactivex.io/RxJava/javadoc/") }
    externalDocumentationLink { url = new URL("https://square.github.io/moshi/1.x/moshi/") }
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    from "${project.buildDir}/javadoc"
    classifier = "javadoc"
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "source"
}

detekt {
    version = detektVersion

    profile("main") {
        input = "$projectDir/src/main/kotlin"
        config = "${rootProject.projectDir}/config/detekt/detekt.yml"
        output = "$buildDir/reports/detekt"
    }
}

ktlint {
    version = ktlintVersion
    reporters = ["CHECKSTYLE"]
}

junitJacoco {
    jacocoVersion = rootProject.ext.jacocoVersion
}

publishing {
    publications {
        library(MavenPublication) {
            artifactId "kickprotocol"

            artifact("$buildDir/outputs/aar/library-release.aar")

            artifact sourceJar {
                classifier "sources"
            }

            artifact javadocJar {
                classifier "javadoc"
            }

            pom.withXml {
                def dependenciesNode = asNode().appendNode("dependencies")

                configurations.api.allDependencies.each {
                    if (it.group != null && (it.name != null || "unspecified".equals(it.name)) && it.version != null) {
                        def dependencyNode = dependenciesNode.appendNode("dependency")

                        dependencyNode.appendNode("groupId", it.group)
                        dependencyNode.appendNode("artifactId", it.name)
                        dependencyNode.appendNode("version", it.version)
                    }
                }
            }
        }
    }
}

afterEvaluate {
    generateReleaseBuildConfig.enabled = false

    check.dependsOn detektCheck
}
